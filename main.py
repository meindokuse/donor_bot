from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder

from api.network_worker import NetWorkWorker

API_TOKEN = 'YOUR_BOT_API_TOKEN'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


@dp.message(CommandStart())
async def main(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    builder = InlineKeyboardBuilder()
    user_id = message.from_user.id
    name = message.from_user.first_name
    data = {
        "telegram_user_id": user_id,
    }

    try:
        response = await NetWorkWorker().get_model_by_params('user/login', data)
        if response and response.get('status') == "success":
            user_info = response.get('user_info')
            name_user = user_info.get('name')
            role = user_info.get('role')

            if role == 1:
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                button_list_requests = InlineKeyboardButton(text="üìã–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
                                                            callback_data="get_reg_requests")
                button_list_donation_all = InlineKeyboardButton(text="ü©∏–î–æ–Ω–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ",
                                                                callback_data="get_donation_list")
                button_list_donation_by_name = InlineKeyboardButton(text="üßæ–î–æ–Ω–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                                                    callback_data="get_users_donation")

                builder.add(button_list_requests, button_list_donation_all, button_list_donation_by_name)
                await message.reply(
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {name}, —É –Ω–∞—Å –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫ {name_user}",
                    reply_markup=builder.as_markup()
                )

            else:
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                button_info = InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", callback_data="get_user_info")
                button_donations = InlineKeyboardButton(text="ü©∏–ú–æ–π —Å–ø–∏—Å–æ–∫ –¥–æ–Ω–∞—Ü–∏–π", callback_data="get")
                button_achievement = InlineKeyboardButton(text="üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="get_")

                builder.add(button_info, button_donations, button_achievement)
                await message.reply(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!", reply_markup=builder.as_markup())

        else:
            # –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            button_reg = InlineKeyboardButton(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            builder.add(button_reg)
            await message.reply(
                "–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–æ –º—ã –º–æ–∂–µ–º —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å)",
                reply_markup=builder.as_markup()
            )

    except Exception as e:
        print(e)
        await message.reply("–û–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")


if __name__ == '__main__':
    dp.start_polling(bot, skip_updates=True)
